package com.example

import com.example.generated.JUnitQuery
import com.example.generated.enums.CustomEnum
import com.example.generated.inputs.SimpleArgumentInput
{{#customScalarsEnabled}}import com.example.generated.scalars.UUID{{/customScalarsEnabled}}
import com.example.generated.junitquery.BasicObject2
import com.example.generated.junitquery.ScalarWrapper
import com.example.generated.junitquery.SecondInterfaceImplementation
import com.expediagroup.graphql.client.spring.GraphQLWebClient
import kotlinx.coroutines.runBlocking
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertNotNull
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertDoesNotThrow
import java.io.File
import java.nio.file.Paths

class GraphQLMavenPluginTest {

    @Test
    fun `verify client code was generated`() {
        val buildDirectory = System.getProperty("buildDirectory")
        val path = Paths.get(buildDirectory, "generated", "sources", "graphql", "com", "example", "generated", "JUnitQuery.kt")
        assertTrue(path.toFile().exists(), "graphql client was generated")
    }

    @Test
    fun `verify client code was generated and can execute query`() {
        val graphQLEndpoint = System.getProperty("graphQLEndpoint")
        val client = GraphQLWebClient(graphQLEndpoint)

        val variables = JUnitQuery.Variables(simpleCriteria = SimpleArgumentInput(newName = "blah"))
        val query = JUnitQuery(variables)

        assertDoesNotThrow {
            runBlocking {
                val response = client.execute(query)
                assertTrue(response.errors == null)
                val data = response.data
                assertNotNull(data)
                val scalarResult = data?.scalarQuery
                assertTrue(scalarResult is ScalarWrapper)
                assertNotNull(scalarResult)
                assertTrue(scalarResult?.count is Int)
                {{#customScalarsEnabled}}
                assertTrue(scalarResult?.custom is UUID)
                {{/customScalarsEnabled}}
                {{^customScalarsEnabled}}
                assertTrue(scalarResult?.custom is String)
                {{/customScalarsEnabled}}
                assertEquals(CustomEnum.ONE, data?.enumQuery)
                val interfaceResult = data?.interfaceQuery
                assertTrue(interfaceResult is SecondInterfaceImplementation)
                val unionResult = data?.unionQuery
                assertTrue(unionResult is BasicObject2)
            }
        }
    }
}
