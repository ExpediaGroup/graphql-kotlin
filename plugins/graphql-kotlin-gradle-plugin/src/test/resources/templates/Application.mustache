package com.example

import com.example.generated.JUnitQuery
import com.example.generated.enums.CustomEnum
import com.example.generated.inputs.SimpleArgumentInput
import com.example.generated.junitquery.BasicObject2
import com.example.generated.junitquery.ScalarWrapper
import com.example.generated.junitquery.SecondInterfaceImplementation
{{#optionalInputWrapper}}
{{#useJackson}}
import com.expediagroup.graphql.client.jackson.types.OptionalInput
{{/useJackson}}
{{^useJackson}}
import com.expediagroup.graphql.client.serialization.types.OptionalInput
{{/useJackson}}
{{/optionalInputWrapper}}
{{#ktorClient}}
import com.expediagroup.graphql.client.ktor.GraphQLKtorClient
{{#defaultHeader}}
import io.ktor.client.HttpClient
import io.ktor.client.engine.cio.CIO
import io.ktor.client.plugins.defaultRequest
import io.ktor.client.request.header
import java.net.URL
{{/defaultHeader}}
{{/ktorClient}}
{{^ktorClient}}
import com.expediagroup.graphql.client.spring.GraphQLWebClient
import org.springframework.web.reactive.function.client.WebClient
{{/ktorClient}}
{{#customScalarsEnabled}}import java.util.UUID{{/customScalarsEnabled}}
import kotlinx.coroutines.runBlocking

fun main() {
    {{^defaultHeader}}
    val client = GraphQLWebClient(System.getProperty("graphQLEndpoint"))
    {{/defaultHeader}}
    {{#defaultHeader}}
        {{#ktorClient}}
    val httpClient = HttpClient(engineFactory = CIO) {
        defaultRequest {
            header("{{name}}", "{{value}}")
        }
    }
    val client = GraphQLKtorClient(
        url = URL(System.getProperty("graphQLEndpoint")),
        httpClient = httpClient
    )
        {{/ktorClient}}
        {{^ktorClient}}
    val webClientBuilder = WebClient.builder()
        .defaultHeader("{{name}}", "{{value}}")
    val client = GraphQLWebClient(
        url = System.getProperty("graphQLEndpoint"),
        builder = webClientBuilder
    )
        {{/ktorClient}}
    {{/defaultHeader}}

    {{#optionalInputWrapper}}
    val variables = JUnitQuery.Variables(SimpleArgumentInput(newName = OptionalInput.Defined("blah")))
    {{/optionalInputWrapper}}
    {{^optionalInputWrapper}}
    val variables = JUnitQuery.Variables(SimpleArgumentInput(newName = "blah"))
    {{/optionalInputWrapper}}
    val query = JUnitQuery(variables)

    runBlocking {
        {{^requestHeader}}
        val response = client.execute(query)
        {{/requestHeader}}
        {{#requestHeader}}
        val response = client.execute(query) {
            header("{{name}}", "{{value}}")
        }
        {{/requestHeader}}

        val data = response.data
        assert(data != null)
        val scalarResult = data?.scalarQuery
        assert(scalarResult is ScalarWrapper)
        assert(scalarResult != null)
        assert(scalarResult?.count is Int)
        {{#customScalarsEnabled}}
        assert(scalarResult?.custom is UUID)
        {{/customScalarsEnabled}}
        {{^customScalarsEnabled}}
        assert(scalarResult?.custom is String)
        {{/customScalarsEnabled}}
        assert(CustomEnum.ONE == data?.enumQuery)
        val interfaceResult = data?.interfaceQuery
        assert(interfaceResult is SecondInterfaceImplementation)
        val unionResult = data?.unionQuery
        assert(unionResult is BasicObject2)
        assert(response.errors == null)
        assert(response.extensions == null)
    }

    {{#ktorClient}}
    client.close()
    {{/ktorClient}}
}
