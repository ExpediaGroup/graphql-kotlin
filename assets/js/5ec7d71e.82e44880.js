"use strict";(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[6182],{66973:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>n,metadata:()=>c,toc:()=>p});var t=r(74848),i=r(28453);const n={id:"server-subscriptions",title:"Subscriptions"},o=void 0,c={id:"server/server-subscriptions",title:"Subscriptions",description:"GraphQL Kotlin provides WebSocket subscription support with the generic Flow based implementation of [GraphQL WS subscription",source:"@site/docs/server/server-subscriptions.md",sourceDirName:"server",slug:"/server/server-subscriptions",permalink:"/graphql-kotlin/docs/9.x.x/server/server-subscriptions",draft:!1,unlisted:!1,editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/docs/server/server-subscriptions.md",tags:[],version:"current",lastUpdatedBy:"Sam",lastUpdatedAt:174594761e4,frontMatter:{id:"server-subscriptions",title:"Subscriptions"},sidebar:"docs",previous:{title:"GraphQLRequestHandler",permalink:"/graphql-kotlin/docs/9.x.x/server/graphql-request-handler"},next:{title:"Automatic Persisted Queries (APQ)",permalink:"/graphql-kotlin/docs/9.x.x/server/automatic-persisted-queries/"}},l={},p=[];function a(e){const s={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["GraphQL Kotlin provides ",(0,t.jsx)(s.code,{children:"WebSocket"})," subscription support with the generic ",(0,t.jsx)(s.code,{children:"Flow"})," based implementation of ",(0,t.jsxs)(s.a,{href:"https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md",children:[(0,t.jsx)(s.code,{children:"GraphQL WS"})," subscription\nprotocol"]}),". Server implementations should extend generic abstract ",(0,t.jsx)(s.code,{children:"GraphQLWebSocketServer<Session, Message>"})," class and fill server\nspecific details on how to read incoming messages from the WebSocket session as well as how to send responses back to the client."]}),"\n",(0,t.jsx)(s.p,{children:"If you are using one of the official server implementations for GraphQL Kotlin, it will have subscription handling setup for you."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["See ",(0,t.jsx)(s.code,{children:"graphql-kotlin-spring-server"})," ",(0,t.jsx)(s.a,{href:"/graphql-kotlin/docs/9.x.x/server/spring-server/spring-subscriptions",children:"subscriptions"})]}),"\n",(0,t.jsxs)(s.li,{children:["See ",(0,t.jsx)(s.code,{children:"graphql-kotlin-ktor-server"})," ",(0,t.jsx)(s.a,{href:"/graphql-kotlin/docs/9.x.x/server/ktor-server/ktor-subscriptions",children:"subscriptions"})]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>c});var t=r(96540);const i={},n=t.createContext(i);function o(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);